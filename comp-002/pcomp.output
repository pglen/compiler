Terminals unused in grammar

   SP
   NL
   SEP
   DIR
   RID
   LOG
   DENY
   YNED
   BEG
   END
   NUMBER
   VAR
   BUILTIN
   IBUILTIN
   UNDEF
   STR
   TO
   FROM
   STORE
   RESTORE
   STRVAR


State 20 conflicts: 1 shift/reduce
State 36 conflicts: 6 shift/reduce
State 37 conflicts: 1 reduce/reduce
State 106 conflicts: 6 shift/reduce
State 113 conflicts: 6 shift/reduce


Grammar

    0 $accept: all1 $end

    1 all1: /* empty */
    2     | all1 debug1
    3     | all1 comments
    4     | all1 decl1
    5     | all1 func1
    6     | all1 assn1

    7 comments: COMMENT
    8         | COMMENT2

    9 debug1: DBG val1

   10 decl1: ID ID '=' val2 ';'
   11      | ID ID ';'

   12 funcbody: /* empty */
   13         | assn1
   14         | comments
   15         | expr1
   16         | decl1
   17         | ret1
   18         | if2
   19         | funcbody assn1
   20         | funcbody expr1
   21         | funcbody comments
   22         | funcbody decl1
   23         | funcbody ret1

   24 assn1: ID '=' expr1

   25 exprlist: expr2
   26         | exprlist ',' expr2

   27 condexpr: /* empty */
   28         | expr2 '<' expr2
   29         | expr2 '>' expr2
   30         | expr2 EQEQ expr2

   31 expr1: expr2 ';'

   32 expr2: expr2a
   33      | expr2 OR expr2a
   34      | expr2 AND expr2a
   35      | expr2 XOR expr2a
   36      | expr2 '|' expr2a
   37      | expr2 '&' expr2a
   38      | expr2 '^' expr2a

   39 expr2a: expr3
   40       | expr2a '+' expr3
   41       | expr2a '-' expr3

   42 expr3: expr4
   43      | expr3 '*' expr4
   44      | expr3 '/' expr4

   45 expr4: ID
   46      | '(' expr2 ')'
   47      | ID '(' exprlist ')'
   48      | '-' expr4

   49 if2: if1
   50    | if2 if1

   51 if1: IF '(' condexpr ')' '{' funcbody '}'
   52    | IF '(' condexpr ')' '{' funcbody '}' ELSE '{' funcbody '}'

   53 val1: NUM
   54     | ID

   55 val2: val1
   56     | expr2

   57 fdecl1: ID ID

   58 fdecl2: /* empty */
   59       | fdecl1
   60       | fdecl2 ',' fdecl1

   61 fdecl3: /* empty */
   62       | '(' ')'
   63       | '(' fdecl2 ')'

   64 funcdecl: FUNC ID

   65 func1: funcdecl fdecl3 '{' funcbody '}'

   66 ret1: RET ';'
   67     | RET expr2 ';'
   68     | RET NUM ';'


Terminals, with rules where they appear

$end (0) 0
'&' (38) 37
'(' (40) 46 47 51 52 62 63
')' (41) 46 47 51 52 62 63
'*' (42) 43
'+' (43) 40
',' (44) 26 60
'-' (45) 41 48
'/' (47) 44
';' (59) 10 11 31 66 67 68
'<' (60) 28
'=' (61) 10 24
'>' (62) 29
'^' (94) 38
'{' (123) 51 52 65
'|' (124) 36
'}' (125) 51 52 65
error (256)
SP (258)
NL (259)
NUM (260) 53 68
ID (261) 10 11 24 45 47 54 57 64
SEP (262)
DIR (263)
RID (264)
DBG (265) 9
LOG (266)
DENY (267)
YNED (268)
FUNC (269) 64
BEG (270)
END (271)
RET (272) 66 67 68
EQEQ (273) 30
NUMBER (274)
OR (275) 33
AND (276) 34
XOR (277) 35
IF (278) 51 52
ELSE (279) 52
VAR (280)
BUILTIN (281)
IBUILTIN (282)
UNDEF (283)
STR (284)
TO (285)
FROM (286)
STORE (287)
RESTORE (288)
STRVAR (289)
COMMENT (290) 7
COMMENT2 (291) 8


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
all1 (54)
    on left: 1 2 3 4 5 6, on right: 0 2 3 4 5 6
comments (55)
    on left: 7 8, on right: 3 14 21
debug1 (56)
    on left: 9, on right: 2
decl1 (57)
    on left: 10 11, on right: 4 16 22
funcbody (58)
    on left: 12 13 14 15 16 17 18 19 20 21 22 23, on right: 19 20 21
    22 23 51 52 65
assn1 (59)
    on left: 24, on right: 6 13 19
exprlist (60)
    on left: 25 26, on right: 26 47
condexpr (61)
    on left: 27 28 29 30, on right: 51 52
expr1 (62)
    on left: 31, on right: 15 20 24
expr2 (63)
    on left: 32 33 34 35 36 37 38, on right: 25 26 28 29 30 31 33 34
    35 36 37 38 46 56 67
expr2a (64)
    on left: 39 40 41, on right: 32 33 34 35 36 37 38 40 41
expr3 (65)
    on left: 42 43 44, on right: 39 40 41 43 44
expr4 (66)
    on left: 45 46 47 48, on right: 42 43 44 48
if2 (67)
    on left: 49 50, on right: 18 50
if1 (68)
    on left: 51 52, on right: 49 50
val1 (69)
    on left: 53 54, on right: 9 55
val2 (70)
    on left: 55 56, on right: 10
fdecl1 (71)
    on left: 57, on right: 59 60
fdecl2 (72)
    on left: 58 59 60, on right: 60 63
fdecl3 (73)
    on left: 61 62 63, on right: 65
funcdecl (74)
    on left: 64, on right: 65
func1 (75)
    on left: 65, on right: 5
ret1 (76)
    on left: 66 67 68, on right: 17 23


state 0

    0 $accept: . all1 $end

    $default  reduce using rule 1 (all1)

    all1  go to state 1


state 1

    0 $accept: all1 . $end
    2 all1: all1 . debug1
    3     | all1 . comments
    4     | all1 . decl1
    5     | all1 . func1
    6     | all1 . assn1

    $end      shift, and go to state 2
    ID        shift, and go to state 3
    DBG       shift, and go to state 4
    FUNC      shift, and go to state 5
    COMMENT   shift, and go to state 6
    COMMENT2  shift, and go to state 7

    comments  go to state 8
    debug1    go to state 9
    decl1     go to state 10
    assn1     go to state 11
    funcdecl  go to state 12
    func1     go to state 13


state 2

    0 $accept: all1 $end .

    $default  accept


state 3

   10 decl1: ID . ID '=' val2 ';'
   11      | ID . ID ';'
   24 assn1: ID . '=' expr1

    ID   shift, and go to state 14
    '='  shift, and go to state 15


state 4

    9 debug1: DBG . val1

    NUM  shift, and go to state 16
    ID   shift, and go to state 17

    val1  go to state 18


state 5

   64 funcdecl: FUNC . ID

    ID  shift, and go to state 19


state 6

    7 comments: COMMENT .

    $default  reduce using rule 7 (comments)


state 7

    8 comments: COMMENT2 .

    $default  reduce using rule 8 (comments)


state 8

    3 all1: all1 comments .

    $default  reduce using rule 3 (all1)


state 9

    2 all1: all1 debug1 .

    $default  reduce using rule 2 (all1)


state 10

    4 all1: all1 decl1 .

    $default  reduce using rule 4 (all1)


state 11

    6 all1: all1 assn1 .

    $default  reduce using rule 6 (all1)


state 12

   65 func1: funcdecl . fdecl3 '{' funcbody '}'

    '('  shift, and go to state 20

    $default  reduce using rule 61 (fdecl3)

    fdecl3  go to state 21


state 13

    5 all1: all1 func1 .

    $default  reduce using rule 5 (all1)


state 14

   10 decl1: ID ID . '=' val2 ';'
   11      | ID ID . ';'

    '='  shift, and go to state 22
    ';'  shift, and go to state 23


state 15

   24 assn1: ID '=' . expr1

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr1   go to state 27
    expr2   go to state 28
    expr2a  go to state 29
    expr3   go to state 30
    expr4   go to state 31


state 16

   53 val1: NUM .

    $default  reduce using rule 53 (val1)


state 17

   54 val1: ID .

    $default  reduce using rule 54 (val1)


state 18

    9 debug1: DBG val1 .

    $default  reduce using rule 9 (debug1)


state 19

   64 funcdecl: FUNC ID .

    $default  reduce using rule 64 (funcdecl)


state 20

   62 fdecl3: '(' . ')'
   63       | '(' . fdecl2 ')'

    ID   shift, and go to state 32
    ')'  shift, and go to state 33

    ')'       [reduce using rule 58 (fdecl2)]
    $default  reduce using rule 58 (fdecl2)

    fdecl1  go to state 34
    fdecl2  go to state 35


state 21

   65 func1: funcdecl fdecl3 . '{' funcbody '}'

    '{'  shift, and go to state 36


state 22

   10 decl1: ID ID '=' . val2 ';'

    NUM  shift, and go to state 16
    ID   shift, and go to state 37
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr2   go to state 38
    expr2a  go to state 29
    expr3   go to state 30
    expr4   go to state 31
    val1    go to state 39
    val2    go to state 40


state 23

   11 decl1: ID ID ';' .

    $default  reduce using rule 11 (decl1)


state 24

   45 expr4: ID .
   47      | ID . '(' exprlist ')'

    '('  shift, and go to state 41

    $default  reduce using rule 45 (expr4)


state 25

   48 expr4: '-' . expr4

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr4  go to state 42


state 26

   46 expr4: '(' . expr2 ')'

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr2   go to state 43
    expr2a  go to state 29
    expr3   go to state 30
    expr4   go to state 31


state 27

   24 assn1: ID '=' expr1 .

    $default  reduce using rule 24 (assn1)


state 28

   31 expr1: expr2 . ';'
   33 expr2: expr2 . OR expr2a
   34      | expr2 . AND expr2a
   35      | expr2 . XOR expr2a
   36      | expr2 . '|' expr2a
   37      | expr2 . '&' expr2a
   38      | expr2 . '^' expr2a

    OR   shift, and go to state 44
    AND  shift, and go to state 45
    XOR  shift, and go to state 46
    ';'  shift, and go to state 47
    '|'  shift, and go to state 48
    '&'  shift, and go to state 49
    '^'  shift, and go to state 50


state 29

   32 expr2: expr2a .
   40 expr2a: expr2a . '+' expr3
   41       | expr2a . '-' expr3

    '+'  shift, and go to state 51
    '-'  shift, and go to state 52

    $default  reduce using rule 32 (expr2)


state 30

   39 expr2a: expr3 .
   43 expr3: expr3 . '*' expr4
   44      | expr3 . '/' expr4

    '*'  shift, and go to state 53
    '/'  shift, and go to state 54

    $default  reduce using rule 39 (expr2a)


state 31

   42 expr3: expr4 .

    $default  reduce using rule 42 (expr3)


state 32

   57 fdecl1: ID . ID

    ID  shift, and go to state 55


state 33

   62 fdecl3: '(' ')' .

    $default  reduce using rule 62 (fdecl3)


state 34

   59 fdecl2: fdecl1 .

    $default  reduce using rule 59 (fdecl2)


state 35

   60 fdecl2: fdecl2 . ',' fdecl1
   63 fdecl3: '(' fdecl2 . ')'

    ','  shift, and go to state 56
    ')'  shift, and go to state 57


state 36

   65 func1: funcdecl fdecl3 '{' . funcbody '}'

    ID        shift, and go to state 58
    RET       shift, and go to state 59
    IF        shift, and go to state 60
    COMMENT   shift, and go to state 6
    COMMENT2  shift, and go to state 7
    '-'       shift, and go to state 25
    '('       shift, and go to state 26

    ID        [reduce using rule 12 (funcbody)]
    RET       [reduce using rule 12 (funcbody)]
    COMMENT   [reduce using rule 12 (funcbody)]
    COMMENT2  [reduce using rule 12 (funcbody)]
    '-'       [reduce using rule 12 (funcbody)]
    '('       [reduce using rule 12 (funcbody)]
    $default  reduce using rule 12 (funcbody)

    comments  go to state 61
    decl1     go to state 62
    funcbody  go to state 63
    assn1     go to state 64
    expr1     go to state 65
    expr2     go to state 28
    expr2a    go to state 29
    expr3     go to state 30
    expr4     go to state 31
    if2       go to state 66
    if1       go to state 67
    ret1      go to state 68


state 37

   45 expr4: ID .
   47      | ID . '(' exprlist ')'
   54 val1: ID .

    '('  shift, and go to state 41

    ';'       reduce using rule 45 (expr4)
    ';'       [reduce using rule 54 (val1)]
    $default  reduce using rule 45 (expr4)


state 38

   33 expr2: expr2 . OR expr2a
   34      | expr2 . AND expr2a
   35      | expr2 . XOR expr2a
   36      | expr2 . '|' expr2a
   37      | expr2 . '&' expr2a
   38      | expr2 . '^' expr2a
   56 val2: expr2 .

    OR   shift, and go to state 44
    AND  shift, and go to state 45
    XOR  shift, and go to state 46
    '|'  shift, and go to state 48
    '&'  shift, and go to state 49
    '^'  shift, and go to state 50

    $default  reduce using rule 56 (val2)


state 39

   55 val2: val1 .

    $default  reduce using rule 55 (val2)


state 40

   10 decl1: ID ID '=' val2 . ';'

    ';'  shift, and go to state 69


state 41

   47 expr4: ID '(' . exprlist ')'

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    exprlist  go to state 70
    expr2     go to state 71
    expr2a    go to state 29
    expr3     go to state 30
    expr4     go to state 31


state 42

   48 expr4: '-' expr4 .

    $default  reduce using rule 48 (expr4)


state 43

   33 expr2: expr2 . OR expr2a
   34      | expr2 . AND expr2a
   35      | expr2 . XOR expr2a
   36      | expr2 . '|' expr2a
   37      | expr2 . '&' expr2a
   38      | expr2 . '^' expr2a
   46 expr4: '(' expr2 . ')'

    OR   shift, and go to state 44
    AND  shift, and go to state 45
    XOR  shift, and go to state 46
    '|'  shift, and go to state 48
    '&'  shift, and go to state 49
    '^'  shift, and go to state 50
    ')'  shift, and go to state 72


state 44

   33 expr2: expr2 OR . expr2a

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr2a  go to state 73
    expr3   go to state 30
    expr4   go to state 31


state 45

   34 expr2: expr2 AND . expr2a

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr2a  go to state 74
    expr3   go to state 30
    expr4   go to state 31


state 46

   35 expr2: expr2 XOR . expr2a

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr2a  go to state 75
    expr3   go to state 30
    expr4   go to state 31


state 47

   31 expr1: expr2 ';' .

    $default  reduce using rule 31 (expr1)


state 48

   36 expr2: expr2 '|' . expr2a

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr2a  go to state 76
    expr3   go to state 30
    expr4   go to state 31


state 49

   37 expr2: expr2 '&' . expr2a

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr2a  go to state 77
    expr3   go to state 30
    expr4   go to state 31


state 50

   38 expr2: expr2 '^' . expr2a

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr2a  go to state 78
    expr3   go to state 30
    expr4   go to state 31


state 51

   40 expr2a: expr2a '+' . expr3

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr3  go to state 79
    expr4  go to state 31


state 52

   41 expr2a: expr2a '-' . expr3

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr3  go to state 80
    expr4  go to state 31


state 53

   43 expr3: expr3 '*' . expr4

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr4  go to state 81


state 54

   44 expr3: expr3 '/' . expr4

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr4  go to state 82


state 55

   57 fdecl1: ID ID .

    $default  reduce using rule 57 (fdecl1)


state 56

   60 fdecl2: fdecl2 ',' . fdecl1

    ID  shift, and go to state 32

    fdecl1  go to state 83


state 57

   63 fdecl3: '(' fdecl2 ')' .

    $default  reduce using rule 63 (fdecl3)


state 58

   10 decl1: ID . ID '=' val2 ';'
   11      | ID . ID ';'
   24 assn1: ID . '=' expr1
   45 expr4: ID .
   47      | ID . '(' exprlist ')'

    ID   shift, and go to state 14
    '='  shift, and go to state 15
    '('  shift, and go to state 41

    $default  reduce using rule 45 (expr4)


state 59

   66 ret1: RET . ';'
   67     | RET . expr2 ';'
   68     | RET . NUM ';'

    NUM  shift, and go to state 84
    ID   shift, and go to state 24
    ';'  shift, and go to state 85
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr2   go to state 86
    expr2a  go to state 29
    expr3   go to state 30
    expr4   go to state 31


state 60

   51 if1: IF . '(' condexpr ')' '{' funcbody '}'
   52    | IF . '(' condexpr ')' '{' funcbody '}' ELSE '{' funcbody '}'

    '('  shift, and go to state 87


state 61

   14 funcbody: comments .

    $default  reduce using rule 14 (funcbody)


state 62

   16 funcbody: decl1 .

    $default  reduce using rule 16 (funcbody)


state 63

   19 funcbody: funcbody . assn1
   20         | funcbody . expr1
   21         | funcbody . comments
   22         | funcbody . decl1
   23         | funcbody . ret1
   65 func1: funcdecl fdecl3 '{' funcbody . '}'

    ID        shift, and go to state 58
    RET       shift, and go to state 59
    COMMENT   shift, and go to state 6
    COMMENT2  shift, and go to state 7
    '-'       shift, and go to state 25
    '('       shift, and go to state 26
    '}'       shift, and go to state 88

    comments  go to state 89
    decl1     go to state 90
    assn1     go to state 91
    expr1     go to state 92
    expr2     go to state 28
    expr2a    go to state 29
    expr3     go to state 30
    expr4     go to state 31
    ret1      go to state 93


state 64

   13 funcbody: assn1 .

    $default  reduce using rule 13 (funcbody)


state 65

   15 funcbody: expr1 .

    $default  reduce using rule 15 (funcbody)


state 66

   18 funcbody: if2 .
   50 if2: if2 . if1

    IF  shift, and go to state 60

    $default  reduce using rule 18 (funcbody)

    if1  go to state 94


state 67

   49 if2: if1 .

    $default  reduce using rule 49 (if2)


state 68

   17 funcbody: ret1 .

    $default  reduce using rule 17 (funcbody)


state 69

   10 decl1: ID ID '=' val2 ';' .

    $default  reduce using rule 10 (decl1)


state 70

   26 exprlist: exprlist . ',' expr2
   47 expr4: ID '(' exprlist . ')'

    ','  shift, and go to state 95
    ')'  shift, and go to state 96


state 71

   25 exprlist: expr2 .
   33 expr2: expr2 . OR expr2a
   34      | expr2 . AND expr2a
   35      | expr2 . XOR expr2a
   36      | expr2 . '|' expr2a
   37      | expr2 . '&' expr2a
   38      | expr2 . '^' expr2a

    OR   shift, and go to state 44
    AND  shift, and go to state 45
    XOR  shift, and go to state 46
    '|'  shift, and go to state 48
    '&'  shift, and go to state 49
    '^'  shift, and go to state 50

    $default  reduce using rule 25 (exprlist)


state 72

   46 expr4: '(' expr2 ')' .

    $default  reduce using rule 46 (expr4)


state 73

   33 expr2: expr2 OR expr2a .
   40 expr2a: expr2a . '+' expr3
   41       | expr2a . '-' expr3

    '+'  shift, and go to state 51
    '-'  shift, and go to state 52

    $default  reduce using rule 33 (expr2)


state 74

   34 expr2: expr2 AND expr2a .
   40 expr2a: expr2a . '+' expr3
   41       | expr2a . '-' expr3

    '+'  shift, and go to state 51
    '-'  shift, and go to state 52

    $default  reduce using rule 34 (expr2)


state 75

   35 expr2: expr2 XOR expr2a .
   40 expr2a: expr2a . '+' expr3
   41       | expr2a . '-' expr3

    '+'  shift, and go to state 51
    '-'  shift, and go to state 52

    $default  reduce using rule 35 (expr2)


state 76

   36 expr2: expr2 '|' expr2a .
   40 expr2a: expr2a . '+' expr3
   41       | expr2a . '-' expr3

    '+'  shift, and go to state 51
    '-'  shift, and go to state 52

    $default  reduce using rule 36 (expr2)


state 77

   37 expr2: expr2 '&' expr2a .
   40 expr2a: expr2a . '+' expr3
   41       | expr2a . '-' expr3

    '+'  shift, and go to state 51
    '-'  shift, and go to state 52

    $default  reduce using rule 37 (expr2)


state 78

   38 expr2: expr2 '^' expr2a .
   40 expr2a: expr2a . '+' expr3
   41       | expr2a . '-' expr3

    '+'  shift, and go to state 51
    '-'  shift, and go to state 52

    $default  reduce using rule 38 (expr2)


state 79

   40 expr2a: expr2a '+' expr3 .
   43 expr3: expr3 . '*' expr4
   44      | expr3 . '/' expr4

    '*'  shift, and go to state 53
    '/'  shift, and go to state 54

    $default  reduce using rule 40 (expr2a)


state 80

   41 expr2a: expr2a '-' expr3 .
   43 expr3: expr3 . '*' expr4
   44      | expr3 . '/' expr4

    '*'  shift, and go to state 53
    '/'  shift, and go to state 54

    $default  reduce using rule 41 (expr2a)


state 81

   43 expr3: expr3 '*' expr4 .

    $default  reduce using rule 43 (expr3)


state 82

   44 expr3: expr3 '/' expr4 .

    $default  reduce using rule 44 (expr3)


state 83

   60 fdecl2: fdecl2 ',' fdecl1 .

    $default  reduce using rule 60 (fdecl2)


state 84

   68 ret1: RET NUM . ';'

    ';'  shift, and go to state 97


state 85

   66 ret1: RET ';' .

    $default  reduce using rule 66 (ret1)


state 86

   33 expr2: expr2 . OR expr2a
   34      | expr2 . AND expr2a
   35      | expr2 . XOR expr2a
   36      | expr2 . '|' expr2a
   37      | expr2 . '&' expr2a
   38      | expr2 . '^' expr2a
   67 ret1: RET expr2 . ';'

    OR   shift, and go to state 44
    AND  shift, and go to state 45
    XOR  shift, and go to state 46
    ';'  shift, and go to state 98
    '|'  shift, and go to state 48
    '&'  shift, and go to state 49
    '^'  shift, and go to state 50


state 87

   51 if1: IF '(' . condexpr ')' '{' funcbody '}'
   52    | IF '(' . condexpr ')' '{' funcbody '}' ELSE '{' funcbody '}'

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    $default  reduce using rule 27 (condexpr)

    condexpr  go to state 99
    expr2     go to state 100
    expr2a    go to state 29
    expr3     go to state 30
    expr4     go to state 31


state 88

   65 func1: funcdecl fdecl3 '{' funcbody '}' .

    $default  reduce using rule 65 (func1)


state 89

   21 funcbody: funcbody comments .

    $default  reduce using rule 21 (funcbody)


state 90

   22 funcbody: funcbody decl1 .

    $default  reduce using rule 22 (funcbody)


state 91

   19 funcbody: funcbody assn1 .

    $default  reduce using rule 19 (funcbody)


state 92

   20 funcbody: funcbody expr1 .

    $default  reduce using rule 20 (funcbody)


state 93

   23 funcbody: funcbody ret1 .

    $default  reduce using rule 23 (funcbody)


state 94

   50 if2: if2 if1 .

    $default  reduce using rule 50 (if2)


state 95

   26 exprlist: exprlist ',' . expr2

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr2   go to state 101
    expr2a  go to state 29
    expr3   go to state 30
    expr4   go to state 31


state 96

   47 expr4: ID '(' exprlist ')' .

    $default  reduce using rule 47 (expr4)


state 97

   68 ret1: RET NUM ';' .

    $default  reduce using rule 68 (ret1)


state 98

   67 ret1: RET expr2 ';' .

    $default  reduce using rule 67 (ret1)


state 99

   51 if1: IF '(' condexpr . ')' '{' funcbody '}'
   52    | IF '(' condexpr . ')' '{' funcbody '}' ELSE '{' funcbody '}'

    ')'  shift, and go to state 102


state 100

   28 condexpr: expr2 . '<' expr2
   29         | expr2 . '>' expr2
   30         | expr2 . EQEQ expr2
   33 expr2: expr2 . OR expr2a
   34      | expr2 . AND expr2a
   35      | expr2 . XOR expr2a
   36      | expr2 . '|' expr2a
   37      | expr2 . '&' expr2a
   38      | expr2 . '^' expr2a

    EQEQ  shift, and go to state 103
    OR    shift, and go to state 44
    AND   shift, and go to state 45
    XOR   shift, and go to state 46
    '<'   shift, and go to state 104
    '>'   shift, and go to state 105
    '|'   shift, and go to state 48
    '&'   shift, and go to state 49
    '^'   shift, and go to state 50


state 101

   26 exprlist: exprlist ',' expr2 .
   33 expr2: expr2 . OR expr2a
   34      | expr2 . AND expr2a
   35      | expr2 . XOR expr2a
   36      | expr2 . '|' expr2a
   37      | expr2 . '&' expr2a
   38      | expr2 . '^' expr2a

    OR   shift, and go to state 44
    AND  shift, and go to state 45
    XOR  shift, and go to state 46
    '|'  shift, and go to state 48
    '&'  shift, and go to state 49
    '^'  shift, and go to state 50

    $default  reduce using rule 26 (exprlist)


state 102

   51 if1: IF '(' condexpr ')' . '{' funcbody '}'
   52    | IF '(' condexpr ')' . '{' funcbody '}' ELSE '{' funcbody '}'

    '{'  shift, and go to state 106


state 103

   30 condexpr: expr2 EQEQ . expr2

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr2   go to state 107
    expr2a  go to state 29
    expr3   go to state 30
    expr4   go to state 31


state 104

   28 condexpr: expr2 '<' . expr2

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr2   go to state 108
    expr2a  go to state 29
    expr3   go to state 30
    expr4   go to state 31


state 105

   29 condexpr: expr2 '>' . expr2

    ID   shift, and go to state 24
    '-'  shift, and go to state 25
    '('  shift, and go to state 26

    expr2   go to state 109
    expr2a  go to state 29
    expr3   go to state 30
    expr4   go to state 31


state 106

   51 if1: IF '(' condexpr ')' '{' . funcbody '}'
   52    | IF '(' condexpr ')' '{' . funcbody '}' ELSE '{' funcbody '}'

    ID        shift, and go to state 58
    RET       shift, and go to state 59
    IF        shift, and go to state 60
    COMMENT   shift, and go to state 6
    COMMENT2  shift, and go to state 7
    '-'       shift, and go to state 25
    '('       shift, and go to state 26

    ID        [reduce using rule 12 (funcbody)]
    RET       [reduce using rule 12 (funcbody)]
    COMMENT   [reduce using rule 12 (funcbody)]
    COMMENT2  [reduce using rule 12 (funcbody)]
    '-'       [reduce using rule 12 (funcbody)]
    '('       [reduce using rule 12 (funcbody)]
    $default  reduce using rule 12 (funcbody)

    comments  go to state 61
    decl1     go to state 62
    funcbody  go to state 110
    assn1     go to state 64
    expr1     go to state 65
    expr2     go to state 28
    expr2a    go to state 29
    expr3     go to state 30
    expr4     go to state 31
    if2       go to state 66
    if1       go to state 67
    ret1      go to state 68


state 107

   30 condexpr: expr2 EQEQ expr2 .
   33 expr2: expr2 . OR expr2a
   34      | expr2 . AND expr2a
   35      | expr2 . XOR expr2a
   36      | expr2 . '|' expr2a
   37      | expr2 . '&' expr2a
   38      | expr2 . '^' expr2a

    OR   shift, and go to state 44
    AND  shift, and go to state 45
    XOR  shift, and go to state 46
    '|'  shift, and go to state 48
    '&'  shift, and go to state 49
    '^'  shift, and go to state 50

    $default  reduce using rule 30 (condexpr)


state 108

   28 condexpr: expr2 '<' expr2 .
   33 expr2: expr2 . OR expr2a
   34      | expr2 . AND expr2a
   35      | expr2 . XOR expr2a
   36      | expr2 . '|' expr2a
   37      | expr2 . '&' expr2a
   38      | expr2 . '^' expr2a

    OR   shift, and go to state 44
    AND  shift, and go to state 45
    XOR  shift, and go to state 46
    '|'  shift, and go to state 48
    '&'  shift, and go to state 49
    '^'  shift, and go to state 50

    $default  reduce using rule 28 (condexpr)


state 109

   29 condexpr: expr2 '>' expr2 .
   33 expr2: expr2 . OR expr2a
   34      | expr2 . AND expr2a
   35      | expr2 . XOR expr2a
   36      | expr2 . '|' expr2a
   37      | expr2 . '&' expr2a
   38      | expr2 . '^' expr2a

    OR   shift, and go to state 44
    AND  shift, and go to state 45
    XOR  shift, and go to state 46
    '|'  shift, and go to state 48
    '&'  shift, and go to state 49
    '^'  shift, and go to state 50

    $default  reduce using rule 29 (condexpr)


state 110

   19 funcbody: funcbody . assn1
   20         | funcbody . expr1
   21         | funcbody . comments
   22         | funcbody . decl1
   23         | funcbody . ret1
   51 if1: IF '(' condexpr ')' '{' funcbody . '}'
   52    | IF '(' condexpr ')' '{' funcbody . '}' ELSE '{' funcbody '}'

    ID        shift, and go to state 58
    RET       shift, and go to state 59
    COMMENT   shift, and go to state 6
    COMMENT2  shift, and go to state 7
    '-'       shift, and go to state 25
    '('       shift, and go to state 26
    '}'       shift, and go to state 111

    comments  go to state 89
    decl1     go to state 90
    assn1     go to state 91
    expr1     go to state 92
    expr2     go to state 28
    expr2a    go to state 29
    expr3     go to state 30
    expr4     go to state 31
    ret1      go to state 93


state 111

   51 if1: IF '(' condexpr ')' '{' funcbody '}' .
   52    | IF '(' condexpr ')' '{' funcbody '}' . ELSE '{' funcbody '}'

    ELSE  shift, and go to state 112

    $default  reduce using rule 51 (if1)


state 112

   52 if1: IF '(' condexpr ')' '{' funcbody '}' ELSE . '{' funcbody '}'

    '{'  shift, and go to state 113


state 113

   52 if1: IF '(' condexpr ')' '{' funcbody '}' ELSE '{' . funcbody '}'

    ID        shift, and go to state 58
    RET       shift, and go to state 59
    IF        shift, and go to state 60
    COMMENT   shift, and go to state 6
    COMMENT2  shift, and go to state 7
    '-'       shift, and go to state 25
    '('       shift, and go to state 26

    ID        [reduce using rule 12 (funcbody)]
    RET       [reduce using rule 12 (funcbody)]
    COMMENT   [reduce using rule 12 (funcbody)]
    COMMENT2  [reduce using rule 12 (funcbody)]
    '-'       [reduce using rule 12 (funcbody)]
    '('       [reduce using rule 12 (funcbody)]
    $default  reduce using rule 12 (funcbody)

    comments  go to state 61
    decl1     go to state 62
    funcbody  go to state 114
    assn1     go to state 64
    expr1     go to state 65
    expr2     go to state 28
    expr2a    go to state 29
    expr3     go to state 30
    expr4     go to state 31
    if2       go to state 66
    if1       go to state 67
    ret1      go to state 68


state 114

   19 funcbody: funcbody . assn1
   20         | funcbody . expr1
   21         | funcbody . comments
   22         | funcbody . decl1
   23         | funcbody . ret1
   52 if1: IF '(' condexpr ')' '{' funcbody '}' ELSE '{' funcbody . '}'

    ID        shift, and go to state 58
    RET       shift, and go to state 59
    COMMENT   shift, and go to state 6
    COMMENT2  shift, and go to state 7
    '-'       shift, and go to state 25
    '('       shift, and go to state 26
    '}'       shift, and go to state 115

    comments  go to state 89
    decl1     go to state 90
    assn1     go to state 91
    expr1     go to state 92
    expr2     go to state 28
    expr2a    go to state 29
    expr3     go to state 30
    expr4     go to state 31
    ret1      go to state 93


state 115

   52 if1: IF '(' condexpr ')' '{' funcbody '}' ELSE '{' funcbody '}' .

    $default  reduce using rule 52 (if1)
